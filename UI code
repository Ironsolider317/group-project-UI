window;
 
window -widthHeight 500 500
-title "UI system"
-visible on
myWindow;

global proc mySimpleUI() {
    string $window = "myWindow";
 
    // If the window exists, delete it
    if (`window -exists $window`) {
        deleteUI $window;
    }
 
    // Create a new window
    window -title "My UI" $window;
 
    columnLayout;
 
    // Example UI element
    button -label "hello there";
 
    showWindow $window;
}
 
// This proc toggles the window open/close
global proc toggleMyUI() {
    string $window = "myWindow";
 
    if (`window -exists $window`) {
        deleteUI $window; // Close window
    } else {
        mySimpleUI();     // Open window
    }
}

toggleMyUI;







// creats a window and the width and height and also the name and if is showing or not
string $myCookie = `window -widthHeight 230 110 -title "MakeLifeEz" -visible on`;
 
// creates a layout
columnLayout -adjustableColumn true -rowSpacing 15;
 
// button to select all objects and the colour is dark green
button -label "SelectAll" 
       -backgroundColor 0.2 0.4 0.2 
       -command "select -all;";
 
// button to undo stuff selected and the colour is bright green
button -label "UndoAll" 
       -backgroundColor 0.6 1.0 0.6 
       -command "select -d;";
 
// button to close the window and change the colour to red
button -label "CloseUI" 
       -backgroundColor 0.8 0.2 0.2 
       -command ("deleteUI " + $myCookie);
 
// shows the window
showWindow $myCookie;









// UI to change an objects colour
global proc MaterialUI() {
    string $window = "MaterialWindow";
 
    if (`window -exists $window`) {
        deleteUI $window;
    }
 
    window -title "Change Shaded Colour" $window;
    columnLayout -adjustableColumn true;
 
    // Buttons that change the objects colour
    button -label "Set to Red" -command "assignColourShader(1,0,0)";
    button -label "Set to Green" -command "assignColourShader(0,1,0)";
    button -label "Set to Blue" -command "assignColourShader(0,0,1)";
 
    showWindow $window;
}
 
global proc assignColourShader(float $r, float $g, float $b) {
    string $sel[] = `ls -sl`;
    if (size($sel) == 0) {
        warning "No object selected.";
        return;
    }
 
    // Creates a new lambert material 
    string $shader = `shadingNode -asShader lambert`;
    string $sg = `sets -renderable true -noSurfaceShader true -empty -name ($shader + "SG")`;
    connectAttr -f ($shader + ".outColour") ($sg + ".surfaceShader");
    setAttr ($shader + ".colour") -type double3 $r $g $b;
 
    // Assigns a colour to the selected object
    sets -e -forceElement $sg $sel;
}
 
 myMaterialUI;










// Cube Scaler

// Delete any existing window with this name
if (`window -exists cubeScaler`) {
    deleteUI -window cubeScaler;
}

// Define a procedure for "scaleCubes"
global proc scale() {
    // scale Cubes
    string $sel[] = `ls -sl`;

    for ($each in $sel){
            scale -r 2 2 2 $each;
        }
    }

// Build the window
window -title "Cube Scaler" -widthHeight 200 100 cubeScaler;
columnLayout -adjustableColumn true -rowSpacing 10;
    button -label "Scale Cubes" -command "scale()";
setParent ..;

// Show the window
showWindow cubeScaler;
